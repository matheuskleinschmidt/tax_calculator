
Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  NotFoundError,
  decompressFromBase64,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  findSync
} = require('./runtime/data-proxy')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.12.0
 * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
 */
Prisma.prismaVersion = {
  client: "4.12.0",
  engine: "659ef412370fa3b41cd7bf6e94587c1dfb7f67e7"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.NotFoundError = NotFoundError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}


  const path = require('path')

const fs = require('fs')

// some frameworks or bundlers replace or totally remove __dirname
const hasDirname = typeof __dirname !== 'undefined' && __dirname !== '/'

// will work in most cases, ie. if the client has not been bundled
const regularDirname = hasDirname && fs.existsSync(path.join(__dirname, 'schema.prisma')) && __dirname

// if the client has been bundled, we need to look for the folders
const foundDirname = !regularDirname && findSync(process.cwd(), [
    "generated/client",
    "client",
], ['d'], ['d'], 1)[0]

const dirname = regularDirname || foundDirname || __dirname

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.DinosaurScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TaxRangesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  min: 'min',
  max: 'max',
  aliquot: 'aliquot',
  AmountToDeduct: 'AmountToDeduct',
  IRPJ: 'IRPJ',
  CSLL: 'CSLL',
  Cofins: 'Cofins',
  PisPasep: 'PisPasep',
  CPP: 'CPP',
  ICMS: 'ICMS',
  description: 'description'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});


exports.Prisma.ModelName = makeEnum({
  Dinosaur: 'Dinosaur',
  taxRanges: 'taxRanges'
});

const compressedDMMF = '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'
const decompressedDMMF = decompressFromBase64(compressedDMMF)
// We are parsing 2 times, as we want independent objects, because
// DMMFClass introduces circular references in the dmmf object
const dmmf = JSON.parse(decompressedDMMF)
exports.Prisma.dmmf = JSON.parse(decompressedDMMF)

/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/workspaces/tax_calculator/generated/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [],
    "previewFeatures": [
      "deno"
    ],
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../.env",
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "4.12.0",
  "engineVersion": "659ef412370fa3b41cd7bf6e94587c1dfb7f67e7",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "dataProxy": true
}
config.dirname = dirname
config.document = dmmf

config.inlineSchema = 'Ly8gVGhpcyBpcyB5b3VyIFByaXNtYSBzY2hlbWEgZmlsZSwKLy8gbGVhcm4gbW9yZSBhYm91dCBpdCBpbiB0aGUgZG9jczogaHR0cHM6Ly9wcmlzLmx5L2QvcHJpc21hLXNjaGVtYQoKZ2VuZXJhdG9yIGNsaWVudCB7CiAgcHJvdmlkZXIgPSAicHJpc21hLWNsaWVudC1qcyIKICBwcmV2aWV3RmVhdHVyZXMgPSBbImRlbm8iXQogIG91dHB1dCA9ICIuLi9nZW5lcmF0ZWQvY2xpZW50Igp9CgpkYXRhc291cmNlIGRiIHsKICBwcm92aWRlciA9ICJwb3N0Z3Jlc3FsIgogIHVybCAgICAgID0gZW52KCJEQVRBQkFTRV9VUkwiKQp9Cgptb2RlbCBEaW5vc2F1ciB7CiAgaWQgICAgICAgICAgSW50ICAgICBAaWQgQGRlZmF1bHQoYXV0b2luY3JlbWVudCgpKQogIG5hbWUgICAgICAgIFN0cmluZyAgQHVuaXF1ZQogIGRlc2NyaXB0aW9uIFN0cmluZwp9Cgptb2RlbCB0YXhSYW5nZXMgewogIGlkICAgICAgICAgIEludCAgICAgQGlkIEBkZWZhdWx0KGF1dG9pbmNyZW1lbnQoKSkKICBuYW1lICAgICAgICBTdHJpbmcgIEB1bmlxdWUKICBtaW4gICAgICAgICBJbnQKICBtYXggICAgICAgICBJbnQKICBhbGlxdW90ICAgICBJbnQKICBBbW91bnRUb0RlZHVjdCBJbnQKICBJUlBKICAgICAgICBJbnQKICBDU0xMICAgICAgICBJbnQKICBDb2ZpbnMgICAgICBJbnQKICBQaXNQYXNlcCAgICBJbnQKICBDUFAgICAgICAgICBJbnQKICBJQ01TICAgICAgICBJbnQKICBkZXNjcmlwdGlvbiBTdHJpbmcKfQoK'
config.inlineSchemaHash = 'ab0de8db24c1735763fda498d1b34ebaed969e6e241c2a7a793c15d453acd344'

config.inlineDatasources = {
  "db": {
    "url": {
      "fromEnvVar": "DATABASE_URL",
      "value": null
    }
  }
}


const { warnEnvConflicts } = require('./runtime/data-proxy')

warnEnvConflicts({
    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(dirname, config.relativeEnvPaths.rootEnvPath),
    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(dirname, config.relativeEnvPaths.schemaEnvPath)
})


const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

